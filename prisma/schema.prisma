// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  // directUrl = env("DIRECT_URL")
}

enum UserRole {
  ADMIN
  MANAGER
  DRIVER
}


enum CarType {
  ELECTRIC
  DIESEL
  GPL
  HYBRID
}

enum EnergyType {
  ELECTRIC
  DIESEL
  GPL
  HYBRID
}

enum Gender {
  MALE
  FEMALE
  OTHER
}


model User {
  id              String    @id
  name            String?
  fullName        String?
  email           String
  emailVerified   Boolean   @default(false)
  image           String?
  role            UserRole  @default(DRIVER)
  banned          Boolean   @default(false)
  banReason       String?
  banExpires      DateTime?
  acceptedTerms   Boolean   @default(false)
  acceptedTermsAt DateTime?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @default(now()) @updatedAt

  sessions        Session[]
  accounts        Account[]
  driverProfile   DriverProfile?

  @@unique([email])
  @@map("user")
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt

  @@map("account")
}

model Verification {
  id         String   @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @default(now()) @updatedAt

  @@map("verification")
}

model DriverProfile {
  id           String   @id @default(cuid())
  userId       String   @unique
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  firstName    String
  lastName     String
  birthday     DateTime?
  gender       Gender?
  nationality  String?
  photo        String?
  
  // Bank account
  bankName     String?
  iban         String?
  accountNumber String?

  // Address
  street       String?
  number       String?
  complement   String?
  neighborhood String?
  city         String?
  district     String?

  createdAt    DateTime @default(now())
  updatedAt    DateTime @default(now()) @updatedAt

  cars          Car[]
  mileage       Mileage[]
  foodExpenses  FoodExpense[]
  energyLogs    EnergyLog[]

  @@map("driver_profile")
}

model Car {
  id         String   @id @default(cuid())
  driverId   String?
  driver     DriverProfile? @relation(fields: [driverId], references: [id], onDelete: Cascade)
  brand      String
  model      String
  color      String?
  type       CarType
  year       Int?
  tag        String?
  image      String?
  rentPrice  Decimal?

  energyLogs    EnergyLog[]

  createdAt  DateTime @default(now())
  updatedAt  DateTime @default(now()) @updatedAt

  @@map("car")
}

model Mileage {
  id         String   @id @default(cuid())
  driverId   String
  driver     DriverProfile @relation(fields: [driverId], references: [id], onDelete: Cascade)

  kmInitialDaily  Int?
  kmFinalDaily    Int?
  kmInitialWeekly Int?
  kmFinalWeekly   Int?
  
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  @@map("mileage")
}

model FoodExpense {
  id        String   @id @default(cuid())
  driverId  String
  driver    DriverProfile @relation(fields: [driverId], references: [id], onDelete: Cascade)
  locale    String
  date      DateTime
  amount    Decimal

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  @@map("food_expense")
}

model EnergyLog {
  id             String   @id @default(cuid())
  driverId       String
  driver         DriverProfile @relation(fields: [driverId], references: [id], onDelete: Cascade)
  carId          String?
  car            Car?     @relation(fields: [carId], references: [id], onDelete: Cascade)

  locale         String              // Ex: Lidl, Ionity, Galp, Tesla Supercharger
  energyType     EnergyType          // ELECTRIC, DIESEL, GPL, HYBRID
  timestamp      DateTime            // Data/hora do carregamento ou abastecimento
  totalCost      Decimal               // Valor total pago
  paymentMethod  String?             // Cartão, MB Way, etc.

  // Campos específicos por tipo
  kWhCharged     Int?              // Para elétricos
  pricePerKWh    Decimal?              // €/kWh
  chargingTime   Int?                // Minutos (para elétricos)

  liters         Int?              // Para combustão
  pricePerLiter  Decimal?              // €/L

  batteryBefore  Int?              // Percentual de bateria antes (%)
  batteryAfter   Int?              // Percentual após (%)
  fuelBefore     Int?              // Percentual tanque antes (%)
  fuelAfter      Int?              // Percentual tanque após (%)

  createdAt      DateTime @default(now())
  updatedAt      DateTime @default(now()) @updatedAt

  @@map("energy_log")
}

